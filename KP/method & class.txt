===============================================================
index.js
===============================================================

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var app = {
    // Application Constructor
    initialize: function() {
        this.bindEvents();
    },
    // Bind Event Listeners
    //
    // Bind any events that are required on startup. Common events are:
    // 'load', 'deviceready', 'offline', and 'online'.
    bindEvents: function() {
        document.addEventListener('deviceready', this.onDeviceReady, false);
    },
    // deviceready Event Handler
    //
    // The scope of 'this' is the event. In order to call the 'receivedEvent'
    // function, we must explicity call 'app.receivedEvent(...);'
    onDeviceReady: function() {
        app.receivedEvent('deviceready');
    },
    // Update DOM on a Received Event
    receivedEvent: function(id) {
        var parentElement = document.getElementById(id);
        var listeningElement = parentElement.querySelector('.listening');
        var receivedElement = parentElement.querySelector('.received');

        listeningElement.setAttribute('style', 'display:none;');
        receivedElement.setAttribute('style', 'display:block;');

        console.log('Received Event: ' + id);
        app.addToCal();
    },
    addToCal: function() {
            var startDate = new Date("July 19, 2013 8:00:00");
            var endDate = new Date("July 19, 2013 4:00:00");
            var title = "PhoneGap Day";
            var location = "Portland";
            var notes = "Arrive on time, don't want to miss out!";
            var success = function() { alert("Success"); };
            var error = function(message) { alert("Oopsie! " + message); };
            calendarPlugin.createEvent(title, location, notes, startDate, endDate, success, error);
    },
};




===============================================================
calendar.js
===============================================================

var calendarPlugin = {
    createEvent: function(title, location, notes, startDate, endDate, successCallback, errorCallback) {
        cordova.exec(
            successCallback, // success callback function
            errorCallback, // error callback function
            'CalendarPlugin', // mapped to our native Java class called "CalendarPlugin"
            'addCalendarEntry', // with this action name
            [{                  // and this array of custom arguments to create our entry
                "title": title,
                "description": notes,
                "eventLocation": location,
                "startTimeMillis": startDate.getTime(),
                "endTimeMillis": endDate.getTime()
            }]
        ); 
    }
}



===============================================================
CalendarPlugin.java
===============================================================

package com.example.myplugin;
 


import org.apache.cordova.api.CallbackContext;

import org.apache.cordova.api.CordovaPlugin;

import org.json.JSONObject;

import org.json.JSONArray;

import org.json.JSONException;

import android.app.Activity;

import android.content.Intent;



public class CalendarPlugin extends CordovaPlugin {
    
	public static final String ACTION_ADD_CALENDAR_ENTRY = "addCalendarEntry";


    
    @Override

    	public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {

        	try {

            		if (ACTION_ADD_CALENDAR_ENTRY.equals(action)) {
 
                		JSONObject arg_object = args.getJSONObject(0);

                		Intent calIntent = new Intent(Intent.ACTION_EDIT)

                    			.setType("vnd.android.cursor.item/event")

                    			.putExtra("beginTime", arg_object.getLong("startTimeMillis"))

                    			.putExtra("endTime", arg_object.getLong("endTimeMillis"))

                    			.putExtra("title", arg_object.getString("title"))

                    			.putExtra("description", arg_object.getString("description"))

                    			.putExtra("eventLocation", arg_object.getString("eventLocation"));

             
                   
				this.cordova.getActivity().startActivity(calIntent);

                   		callbackContext.success();

                   		return true;

            		}
            

			callbackContext.error("Invalid action");
            
			return false;

        	} catch(Exception e) {

            		System.err.println("Exception: " + e.getMessage());

            		callbackContext.error(e.getMessage());

            		return false;
        
		} 
    
	}

}




===============================================================
CalendarPlugin.java
===============================================================



package com.example.myplugin;



import android.os.Bundle;

import org.apache.cordova.*;



public class CalendarPluginSampleApp extends DroidGap
{

    @Override

    public void onCreate(Bundle savedInstanceState)
    {

        super.onCreate(savedInstanceState);

        // Set by <content src="index.html" /> in config.xml

        super.loadUrl(Config.getStartUrl());

        //super.loadUrl("file:///android_asset/www/index.html")

    }

}

